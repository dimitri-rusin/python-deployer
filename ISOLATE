#!/usr/bin/env bash

# Get the directory of the script
DEPLOY_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
SUBLIME_TEXT_PROJECTS_PATH="$HOME/code/Sublime Text Projects"

# Check if no arguments were passed to the script
if [ $# -eq 0 ]; then
  # Display error message and exit if no arguments are given
  echo "Error: No directory name provided."
  exit 1
fi

# Define the new project directory path
project_basename="$1"
project_dir=$(realpath "$project_basename")
project_dir_basename=$(basename "$project_dir")

# Create extra folder:
if [ ! -d "$project_dir" ]; then

  # Create the new project directory
  mkdir $project_dir

  # Change into the newly created directory
  cd $project_dir

  # Initialize Git repository
  git init
else
  cd "$project_dir"
fi

if [ -d ".python" ]; then
  echo ".python directory already exists. Exiting."
  exit 1
fi

mkdir .python/

# Copy specified files from the source directory to the current directory
cp $DEPLOY_DIR/ALIGN_PIP .python/ALIGN_PIP
cp $DEPLOY_DIR/align_pip.py .python/align_pip.py
cp $DEPLOY_DIR/BUILD .python/BUILD
cp $DEPLOY_DIR/CLEAN .python/CLEAN
cp $DEPLOY_DIR/conda.yaml .python/conda.yaml
cp $DEPLOY_DIR/pip.txt .python/pip.txt
cp $DEPLOY_DIR/RUN .python/RUN
cp $DEPLOY_DIR/workstory.md .python/workstory.md

# Grant execute permissions to the .BUILD and .RUN files
chmod u+x .python/BUILD .python/RUN

[ ! -f .gitignore ] && cp $DEPLOY_DIR/gitignore .gitignore

# If you use Sublime Text, also add this directory to the list of `Quick Switch Project` projects.
if command -v subl &> /dev/null
then
  # Determine the first Sublime Text project path
  first_project_file=$(find "$SUBLIME_TEXT_PROJECTS_PATH" -type f -name "*.sublime-project" 2>/dev/null | head -n 1)
  project_file=$(dirname "$first_project_file")/"$project_dir_basename.sublime-project"

  # Write the project file content
  echo '{
    "folders":
    [
      {
        "path": "'$project_dir'"
      }
    ]
  }' > "$project_file"

  subl "$project_file"
fi
